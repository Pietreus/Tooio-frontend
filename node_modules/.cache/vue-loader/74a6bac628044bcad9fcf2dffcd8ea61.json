{"remainingRequest":"/home/pietreus/euvsvirus/Tooio/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pietreus/euvsvirus/Tooio/client/src/components/OutgoingVideo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/pietreus/euvsvirus/Tooio/client/src/components/OutgoingVideo.vue","mtime":1587889512998},{"path":"/home/pietreus/euvsvirus/Tooio/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pietreus/euvsvirus/Tooio/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/pietreus/euvsvirus/Tooio/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pietreus/euvsvirus/Tooio/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBpbyBmcm9tICJzb2NrZXQuaW8tY2xpZW50IjsKdmFyIHNlc3Npb25EZXNjcmlwdGlvbiA9CiAgd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbiB8fAogIHdpbmRvdy5tb3pSVENTZXNzaW9uRGVzY3JpcHRpb24gfHwKICB3aW5kb3cud2Via2l0UlRDU2Vzc2lvbkRlc2NyaXB0aW9uIHx8CiAgd2luZG93Lm1zUlRDU2Vzc2lvbkRlc2NyaXB0aW9uOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIk91dGdvaW5nVmlkZW9zIiwKICBwcm9wczogewogICAgcm9vbU5hbWU6IFN0cmluZwogIH0sCgogIGRhdGE6ICgpID0+ICh7CiAgICBleGlzdGluZ1N0cmVhbXM6IFtdLAogICAgc29ja2V0OiB7fSwKICAgIGxvY2FsU3RyZWFtOiBudWxsLAogICAgcGM6IHt9LAogICAgYW5zd2Vyc0Zyb206IHt9LAogICAgYWN0aXZlVmlkZW9zOiBbXSwKICAgIGljZUNvbmZpZ3VyYXRpb246IHsKICAgICAgaWNlU2VydmVyczogWwogICAgICAgIHsKICAgICAgICAgIHVybHM6IFsic3R1bjpzdHVuLnNjaGx1bmQuZGUiXQogICAgICAgIH0KICAgICAgXQogICAgfQogIH0pLAogIG1ldGhvZHM6IHsKICAgIHNldHVwTG9jYWxTdHJlYW06IGFzeW5jIGZ1bmN0aW9uKCkgewogICAgICBjb25zdCB2aWRlb0NvbnRhaW5lciA9IHRoaXMuJHJlZnMudmlkZW9Db250YWluZXI7CiAgICAgIHZpZGVvQ29udGFpbmVyLnNyY09iamVjdCA9IHRoaXMubG9jYWxTdHJlYW07CiAgICAgIHZpZGVvQ29udGFpbmVyLm9ubG9hZGVkbWV0YWRhdGEgPSBmdW5jdGlvbigpIHsKICAgICAgICB2aWRlb0NvbnRhaW5lci5wbGF5KCk7CiAgICAgIH07CiAgICB9LAogICAgc2V0dXBTb2NrZXRzOiBhc3luYyBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5zb2NrZXQub24oImFkZC11c2VycyIsIHRoaXMub25BZGRVc2Vycyk7CiAgICAgIHRoaXMuc29ja2V0Lm9uKCJvZmZlci1tYWRlIiwgdGhpcy5vbk9mZmVyTWFkZSk7CiAgICAgIHRoaXMuc29ja2V0Lm9uKCJhbnN3ZXItbWFkZSIsIHRoaXMub25BbnN3ZXJNYWRlKTsKICAgIH0sCiAgICBlcnJvckhhbmRsZXI6IGZ1bmN0aW9uKGVycikgewogICAgICBjb25zb2xlLndhcm4oIkVycm9yIiwgZXJyKTsKICAgIH0sCiAgICBjcmVhdGVPZmZlcjogZnVuY3Rpb24oaWQpIHsKICAgICAgdGhpcy5wY1tpZF0uY3JlYXRlT2ZmZXIob2ZmZXIgPT4gewogICAgICAgIHRoaXMucGNbaWRdLnNldExvY2FsRGVzY3JpcHRpb24oCiAgICAgICAgICBuZXcgc2Vzc2lvbkRlc2NyaXB0aW9uKG9mZmVyKSwKICAgICAgICAgICgpID0+IHsKICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgibWFrZS1vZmZlciIsIHsKICAgICAgICAgICAgICBvZmZlcjogb2ZmZXIsCiAgICAgICAgICAgICAgdG86IGlkCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwKICAgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyCiAgICAgICAgKTsKICAgICAgfSwgdGhpcy5lcnJvckhhbmRsZXIpOwogICAgfSwKICAgIG9uQWRkVXNlcnM6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgY29uc29sZS5sb2coImFkZHVzZXJzIiwgZGF0YSk7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS51c2Vycy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLAogICAgICAgICAgaWQgPSBkYXRhLnVzZXJzW2ldOwoKICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoImlkIiwgaWQpOwogICAgICAgIGVsLmlubmVySFRNTCA9IGlkOwogICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgKCkgPT4gewogICAgICAgICAgdGhpcy5hZGRQZWVyQ29ubmVjdGlvbihpZCk7CiAgICAgICAgICB0aGlzLmNyZWF0ZU9mZmVyKGlkKTsKICAgICAgICB9KTsKICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlcnMiKS5hcHBlbmRDaGlsZChlbCk7CiAgICAgIH0KICAgIH0sCiAgICBvbkFuc3dlck1hZGU6IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgY29uc29sZS5sb2coImFuc3dlcm1hZGUiLCBkYXRhKTsKCiAgICAgIHRoaXMucGNbZGF0YS5zb2NrZXRdLnNldFJlbW90ZURlc2NyaXB0aW9uKAogICAgICAgIG5ldyBzZXNzaW9uRGVzY3JpcHRpb24oZGF0YS5hbnN3ZXIpLAogICAgICAgICgpID0+IHsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGRhdGEuc29ja2V0KS5zZXRBdHRyaWJ1dGUoImNsYXNzIiwgImFjdGl2ZSIpOwogICAgICAgICAgaWYgKCF0aGlzLmFuc3dlcnNGcm9tW2RhdGEuc29ja2V0XSkgewogICAgICAgICAgICB0aGlzLmNyZWF0ZU9mZmVyKGRhdGEuc29ja2V0KTsKICAgICAgICAgICAgdGhpcy5hbnN3ZXJzRnJvbVtkYXRhLnNvY2tldF0gPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIKICAgICAgKTsKICAgIH0sCiAgICBvbk9mZmVyTWFkZTogZnVuY3Rpb24oZGF0YSkgewogICAgICBjb25zb2xlLmxvZygib2ZmZXJtYWRlIiwgZGF0YSk7CiAgICAgIHRoaXMuYWRkUGVlckNvbm5lY3Rpb24oZGF0YS5zb2NrZXQpOwogICAgICB0aGlzLnBjW2RhdGEuc29ja2V0XS5zZXRSZW1vdGVEZXNjcmlwdGlvbigKICAgICAgICBuZXcgc2Vzc2lvbkRlc2NyaXB0aW9uKGRhdGEub2ZmZXIpLAogICAgICAgICgpID0+IHsKICAgICAgICAgIHRoaXMucGNbZGF0YS5zb2NrZXRdLmNyZWF0ZUFuc3dlcihhbnN3ZXIgPT4gewogICAgICAgICAgICB0aGlzLnBjW2RhdGEuc29ja2V0XS5zZXRMb2NhbERlc2NyaXB0aW9uKAogICAgICAgICAgICAgIG5ldyBzZXNzaW9uRGVzY3JpcHRpb24oYW5zd2VyKSwKICAgICAgICAgICAgICAoKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLnNvY2tldC5lbWl0KCJtYWtlLWFuc3dlciIsIHsKICAgICAgICAgICAgICAgICAgYW5zd2VyOiBhbnN3ZXIsCiAgICAgICAgICAgICAgICAgIHRvOiBkYXRhLnNvY2tldAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB0aGlzLmVycm9ySGFuZGxlcgogICAgICAgICAgICApOwogICAgICAgICAgfSwgdGhpcy5lcnJvckhhbmRsZXIpOwogICAgICAgIH0sCiAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIKICAgICAgKTsKICAgIH0sCiAgICBhZGRQZWVyQ29ubmVjdGlvbjogZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIHBlZXJDb25uZWN0aW9uID0KICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gfHwKICAgICAgICB3aW5kb3cubW96UlRDUGVlckNvbm5lY3Rpb24gfHwKICAgICAgICB3aW5kb3cud2Via2l0UlRDUGVlckNvbm5lY3Rpb24gfHwKICAgICAgICB3aW5kb3cubXNSVENQZWVyQ29ubmVjdGlvbjsKICAgICAgY29uc3QgbmV3Q29ubmVjdGlvbiA9IG5ldyBwZWVyQ29ubmVjdGlvbih0aGlzLmljZUNvbmZpZ3VyYXRpb24pOwogICAgICBuZXdDb25uZWN0aW9uLm9udHJhY2sgPSBvYmogPT4gewogICAgICAgIGlmICghdGhpcy5leGlzdGluZ1N0cmVhbXMuaW5jbHVkZXMob2JqLnN0cmVhbXNbMF0pKSB7CiAgICAgICAgICB0aGlzLmV4aXN0aW5nU3RyZWFtcy5wdXNoKG9iai5zdHJlYW1zWzBdKQogICAgICAgICAgY29uc3QgdmlkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgidmlkZW8iKTsKICAgICAgICAgIHZpZC5zZXRBdHRyaWJ1dGUoImNsYXNzIiwgInZpZGVvLXNtYWxsIik7CiAgICAgICAgICB2aWQuc2V0QXR0cmlidXRlKCJhdXRvcGxheSIsICJhdXRvcGxheSIpOwogICAgICAgICAgdmlkLnNldEF0dHJpYnV0ZSgic3R5bGUiLCAid2lkdGg6IDMwMHB4OyIpCiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlcnMtY29udGFpbmVyIikuYXBwZW5kQ2hpbGQodmlkKTsKICAgICAgICAgIHZpZC5zcmNPYmplY3QgPSBvYmouc3RyZWFtc1swXTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIG5ld0Nvbm5lY3Rpb24uYWRkU3RyZWFtKHRoaXMubG9jYWxTdHJlYW0pOwogICAgICB0aGlzLnBjW2lkXSA9IG5ld0Nvbm5lY3Rpb247CiAgICB9CiAgfSwKICBtb3VudGVkOiBhc3luYyBmdW5jdGlvbigpIHsKICAgIHRoaXMuc29ja2V0ID0gaW8uY29ubmVjdCgiaHR0cDovL2xvY2FsaG9zdDo1MDAwIik7CgogICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9CiAgICAgIG5hdmlnYXRvci5nZXRVc2VyTWVkaWEgfHwKICAgICAgbmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSB8fAogICAgICBuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhIHx8CiAgICAgIG5hdmlnYXRvci5tc0dldFVzZXJNZWRpYTsKICAgIGNvbnNvbGUubG9nKG5hdmlnYXRvcik7CiAgICB0aGlzLmxvY2FsU3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoewogICAgICBhdWRpbzogdHJ1ZSwKICAgICAgdmlkZW86IHRydWUKICAgIH0pOwoKICAgIGF3YWl0IHRoaXMuc2V0dXBMb2NhbFN0cmVhbSgpOwogICAgdGhpcy5hZGRQZWVyQ29ubmVjdGlvbih0aGlzLnNvY2tldC5pZCk7CiAgICBhd2FpdCB0aGlzLnNldHVwU29ja2V0cygpOwoKICAgIHRoaXMuc29ja2V0LmVtaXQoImpvaW4tdGFibGUiLCB7CiAgICAgIG5hbWU6IHRoaXMucm9vbU5hbWUKICAgIH0pOwogIH0sCiAgd2F0Y2g6IHsKICAgIC8vIHdoZW5ldmVyIHF1ZXN0aW9uIGNoYW5nZXMsIHRoaXMgZnVuY3Rpb24gd2lsbCBydW4KICAgIHJvb21OYW1lOiBmdW5jdGlvbihuZXdOYW1lLCBvbGROYW1lKSB7CiAgICAgIHRoaXMuc29ja2V0LmVtaXQoImxlYXZlLXRhYmxlIiwgewogICAgICAgIG5hbWU6IG9sZE5hbWUKICAgICAgfSk7CiAgICAgIHRoaXMucGMgPSB7fTsKICAgICAgdGhpcy5hbnN3ZXJzRnJvbSA9IFtdOwogICAgICB0aGlzLnNvY2tldC5lbWl0KCJqb2luLXRhYmxlIiwgewogICAgICAgIG5hbWU6IG5ld05hbWUKICAgICAgfSk7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["OutgoingVideo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"OutgoingVideo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"hello\">\n    <div class=\"videos\">\n      <div id=\"users-container\">\n              <video id=\"videoContainer\" ref=\"videoContainer\" class=\"video-small\"></video>\n\n      </div>\n      <div id=\"users\"></div>\n    </div>\n    {{roomName}}\n  </div>\n</template>\n\n<script>\nimport io from \"socket.io-client\";\nvar sessionDescription =\n  window.RTCSessionDescription ||\n  window.mozRTCSessionDescription ||\n  window.webkitRTCSessionDescription ||\n  window.msRTCSessionDescription;\nexport default {\n  name: \"OutgoingVideos\",\n  props: {\n    roomName: String\n  },\n\n  data: () => ({\n    existingStreams: [],\n    socket: {},\n    localStream: null,\n    pc: {},\n    answersFrom: {},\n    activeVideos: [],\n    iceConfiguration: {\n      iceServers: [\n        {\n          urls: [\"stun:stun.schlund.de\"]\n        }\n      ]\n    }\n  }),\n  methods: {\n    setupLocalStream: async function() {\n      const videoContainer = this.$refs.videoContainer;\n      videoContainer.srcObject = this.localStream;\n      videoContainer.onloadedmetadata = function() {\n        videoContainer.play();\n      };\n    },\n    setupSockets: async function() {\n      this.socket.on(\"add-users\", this.onAddUsers);\n      this.socket.on(\"offer-made\", this.onOfferMade);\n      this.socket.on(\"answer-made\", this.onAnswerMade);\n    },\n    errorHandler: function(err) {\n      console.warn(\"Error\", err);\n    },\n    createOffer: function(id) {\n      this.pc[id].createOffer(offer => {\n        this.pc[id].setLocalDescription(\n          new sessionDescription(offer),\n          () => {\n            this.socket.emit(\"make-offer\", {\n              offer: offer,\n              to: id\n            });\n          },\n          this.errorHandler\n        );\n      }, this.errorHandler);\n    },\n    onAddUsers: function(data) {\n      console.log(\"addusers\", data);\n      for (var i = 0; i < data.users.length; i++) {\n        var el = document.createElement(\"div\"),\n          id = data.users[i];\n\n        el.setAttribute(\"id\", id);\n        el.innerHTML = id;\n        el.addEventListener(\"click\", () => {\n          this.addPeerConnection(id);\n          this.createOffer(id);\n        });\n        document.getElementById(\"users\").appendChild(el);\n      }\n    },\n    onAnswerMade: function(data) {\n      console.log(\"answermade\", data);\n\n      this.pc[data.socket].setRemoteDescription(\n        new sessionDescription(data.answer),\n        () => {\n          document.getElementById(data.socket).setAttribute(\"class\", \"active\");\n          if (!this.answersFrom[data.socket]) {\n            this.createOffer(data.socket);\n            this.answersFrom[data.socket] = true;\n          }\n        },\n        this.errorHandler\n      );\n    },\n    onOfferMade: function(data) {\n      console.log(\"offermade\", data);\n      this.addPeerConnection(data.socket);\n      this.pc[data.socket].setRemoteDescription(\n        new sessionDescription(data.offer),\n        () => {\n          this.pc[data.socket].createAnswer(answer => {\n            this.pc[data.socket].setLocalDescription(\n              new sessionDescription(answer),\n              () => {\n                this.socket.emit(\"make-answer\", {\n                  answer: answer,\n                  to: data.socket\n                });\n              },\n              this.errorHandler\n            );\n          }, this.errorHandler);\n        },\n        this.errorHandler\n      );\n    },\n    addPeerConnection: function(id) {\n      var peerConnection =\n        window.RTCPeerConnection ||\n        window.mozRTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.msRTCPeerConnection;\n      const newConnection = new peerConnection(this.iceConfiguration);\n      newConnection.ontrack = obj => {\n        if (!this.existingStreams.includes(obj.streams[0])) {\n          this.existingStreams.push(obj.streams[0])\n          const vid = document.createElement(\"video\");\n          vid.setAttribute(\"class\", \"video-small\");\n          vid.setAttribute(\"autoplay\", \"autoplay\");\n          vid.setAttribute(\"style\", \"width: 300px;\")\n          document.getElementById(\"users-container\").appendChild(vid);\n          vid.srcObject = obj.streams[0];\n        }\n      };\n      newConnection.addStream(this.localStream);\n      this.pc[id] = newConnection;\n    }\n  },\n  mounted: async function() {\n    this.socket = io.connect(\"http://localhost:5000\");\n\n    navigator.getUserMedia =\n      navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozGetUserMedia ||\n      navigator.msGetUserMedia;\n    console.log(navigator);\n    this.localStream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n\n    await this.setupLocalStream();\n    this.addPeerConnection(this.socket.id);\n    await this.setupSockets();\n\n    this.socket.emit(\"join-table\", {\n      name: this.roomName\n    });\n  },\n  watch: {\n    // whenever question changes, this function will run\n    roomName: function(newName, oldName) {\n      this.socket.emit(\"leave-table\", {\n        name: oldName\n      });\n      this.pc = {};\n      this.answersFrom = [];\n      this.socket.emit(\"join-table\", {\n        name: newName\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n#users-container {\n  display: flex;\n  overflow: auto;\n  max-width: 30vw;\n}\n.videos {\n  display: flex;\n  overflow: auto;\n}\n#users{\n    max-width: 15vw;\n}\n.video-small{\n  width: 300px;\n}\n</style>\n"]}]}