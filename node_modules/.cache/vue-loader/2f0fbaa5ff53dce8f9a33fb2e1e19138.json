{"remainingRequest":"/home/pietreus/euvsvirus/deploy/Tooio-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/pietreus/euvsvirus/deploy/Tooio-frontend/src/components/OutgoingVideo.vue?vue&type=style&index=0&id=906f1ed0&scoped=true&lang=css&","dependencies":[{"path":"/home/pietreus/euvsvirus/deploy/Tooio-frontend/src/components/OutgoingVideo.vue","mtime":1587917447315},{"path":"/home/pietreus/euvsvirus/deploy/Tooio-frontend/node_modules/css-loader/dist/cjs.js","mtime":1587917427702},{"path":"/home/pietreus/euvsvirus/deploy/Tooio-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1587917427135},{"path":"/home/pietreus/euvsvirus/deploy/Tooio-frontend/node_modules/postcss-loader/src/index.js","mtime":1587917427745},{"path":"/home/pietreus/euvsvirus/deploy/Tooio-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1587917427739},{"path":"/home/pietreus/euvsvirus/deploy/Tooio-frontend/node_modules/vue-loader/lib/index.js","mtime":1587917427135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgojdXNlcnMtY29udGFpbmVyIHsKICBkaXNwbGF5OiBmbGV4OwogIG92ZXJmbG93OiBhdXRvOwogIG1heC13aWR0aDogNDV2dzsKfQoudmlkZW9zIHsKICBkaXNwbGF5OiBmbGV4OwogIG92ZXJmbG93OiBhdXRvOwp9CiN1c2VycyB7CiAgbWF4LXdpZHRoOiAxNXZ3Owp9Ci52aWRlby1zbWFsbCB7CiAgd2lkdGg6IDMwMHB4Owp9Cg=="},{"version":3,"sources":["OutgoingVideo.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"OutgoingVideo.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"hello\">\n    <div class=\"videos\">\n      <div id=\"users-container\">\n        <video id=\"videoContainer\" ref=\"videoContainer\" class=\"video-small\"></video>\n      </div>\n      <div id=\"users\" style=\"display:none;\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport io from \"socket.io-client\";\nvar sessionDescription =\n  window.RTCSessionDescription ||\n  window.mozRTCSessionDescription ||\n  window.webkitRTCSessionDescription ||\n  window.msRTCSessionDescription;\nexport default {\n  name: \"OutgoingVideos\",\n  props: {\n    roomName: String\n  },\n\n  data: () => ({\n    existingStreams: [],\n    socket: {},\n    localStream: null,\n    pc: {},\n    answersFrom: {},\n    activeVideos: [],\n    iceConfiguration: {\n      iceServers: [\n        {\n          urls: [\"stun:stun.schlund.de\"]\n        }\n      ]\n    }\n  }),\n  methods: {\n    setupLocalStream: async function() {\n      const videoContainer = this.$refs.videoContainer;\n      videoContainer.srcObject = this.localStream;\n      videoContainer.onloadedmetadata = function() {\n        videoContainer.play();\n      };\n    },\n    setupSockets: async function() {\n      this.socket.on(\"add-users\", this.onAddUsers);\n      this.socket.on(\"offer-made\", this.onOfferMade);\n      this.socket.on(\"answer-made\", this.onAnswerMade);\n      this.socket.on(\"remove-users\", this.onRemoveUser);\n    },\n    errorHandler: function(err) {\n      console.warn(\"Error\", err);\n    },\n    createOffer: function(id) {\n      this.pc[id].createOffer(offer => {\n        this.pc[id].setLocalDescription(\n          new sessionDescription(offer),\n          () => {\n            this.socket.emit(\"make-offer\", {\n              offer: offer,\n              to: id\n            });\n          },\n          this.errorHandler\n        );\n      }, this.errorHandler);\n    },\n    onAddUsers: function(data) {\n      console.log(\"addusers\", data);\n      for (var i = 0; i < data.users.length; i++) {\n        var el = document.createElement(\"div\"),\n          id = data.users[i];\n\n        el.setAttribute(\"id\", id);\n        el.innerHTML = id;\n        window.setTimeout(() => {\n          this.addPeerConnection(id);\n          this.createOffer(id);\n        }, 1000);\n        document.getElementById(\"users\").appendChild(el);\n      }\n    },\n    onRemoveUser: function(data) {\n      console.log(\"removeUser\", data.users[0]);\n      document.getElementById(data.users[0]).remove();\n      const video = document.getElementById(\"video\" + data.users[0]);\n      if (video) {\n        video.remove();\n      }\n    },\n    onAnswerMade: function(data) {\n      console.log(\"answermade\", data);\n\n      this.pc[data.socket].setRemoteDescription(\n        new sessionDescription(data.answer),\n        () => {\n          document.getElementById(data.socket).setAttribute(\"class\", \"active\");\n          if (!this.answersFrom[data.socket]) {\n            this.createOffer(data.socket);\n            this.answersFrom[data.socket] = true;\n          }\n        },\n        this.errorHandler\n      );\n    },\n    onOfferMade: function(data) {\n      console.log(\"offermade\", data);\n      this.addPeerConnection(data.socket);\n      this.pc[data.socket].setRemoteDescription(\n        new sessionDescription(data.offer),\n        () => {\n          this.pc[data.socket].createAnswer(answer => {\n            this.pc[data.socket].setLocalDescription(\n              new sessionDescription(answer),\n              () => {\n                this.socket.emit(\"make-answer\", {\n                  answer: answer,\n                  to: data.socket\n                });\n              },\n              this.errorHandler\n            );\n          }, this.errorHandler);\n        },\n        this.errorHandler\n      );\n    },\n    addPeerConnection: function(id) {\n      var peerConnection =\n        window.RTCPeerConnection ||\n        window.mozRTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.msRTCPeerConnection;\n      const newConnection = new peerConnection(this.iceConfiguration);\n      newConnection.ontrack = obj => {\n        if (!this.existingStreams.includes(obj.streams[0])) {\n          this.existingStreams.push(obj.streams[0]);\n          const vid = document.createElement(\"video\");\n          vid.setAttribute(\"class\", \"video-small remote\");\n          vid.setAttribute(\"autoplay\", \"autoplay\");\n          vid.setAttribute(\"style\", \"width: 300px;\");\n          vid.setAttribute(\"id\", \"video\" + id);\n          document.getElementById(\"users-container\").appendChild(vid);\n          vid.srcObject = obj.streams[0];\n        }\n      };\n      newConnection.addStream(this.localStream);\n      this.pc[id] = newConnection;\n    }\n  },\n  mounted: async function() {\n    this.socket = io.connect(\"http://localhost:5000\");\n\n    navigator.getUserMedia =\n      navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozGetUserMedia ||\n      navigator.msGetUserMedia;\n    console.log(navigator);\n    this.localStream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n\n    await this.setupLocalStream();\n    this.addPeerConnection(this.socket.id);\n    await this.setupSockets();\n\n    this.socket.emit(\"join-table\", {\n      name: this.roomName\n    });\n  },\n  watch: {\n    // whenever question changes, this function will run\n    roomName: function(newName, oldName) {\n      this.pc = {};\n      this.answersFrom = [];\n      const elementsToRemove = document\n        .getElementById(\"users-container\")\n        .getElementsByClassName(\"remote\");\n      for (let i = 0; i < elementsToRemove.length; i) {\n        elementsToRemove[i].remove();\n      }\n      const node = document.getElementById(\"users\");\n      while (node.firstChild) {\n        console.log(node.firstChild);\n        node.removeChild(node.firstChild);\n      }\n      this.socket.emit(\"join-table\", {\n        name: newName\n      });\n      this.socket.emit(\"leave-table\", {\n        name: oldName\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n#users-container {\n  display: flex;\n  overflow: auto;\n  max-width: 45vw;\n}\n.videos {\n  display: flex;\n  overflow: auto;\n}\n#users {\n  max-width: 15vw;\n}\n.video-small {\n  width: 300px;\n}\n</style>\n"]}]}